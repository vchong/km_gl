/* SPDX-License-Identifier: BSD-2-Clause */
/* Copyright (c) 2018, Linaro Limited */

#ifndef LOCAL_KM_H
#define LOCAL_KM_H

#include <sys/queue.h>
#include <tee_api_types.h>
#include <util.h>

struct pack_state;

enum km_tag_type {
	KM3_TAG_TYPE_INVALID	= (int)SHIFT_U32(0, 28),
	KM3_TAG_TYPE_ENUM	= (int)SHIFT_U32(1, 28),
	KM3_TAG_TYPE_ENUM_REP	= (int)SHIFT_U32(2, 28),
	KM3_TAG_TYPE_UINT	= (int)SHIFT_U32(3, 28),
	KM3_TAG_TYPE_UINT_REP	= (int)SHIFT_U32(4, 28),
	KM3_TAG_TYPE_ULONG	= (int)SHIFT_U32(5, 28),
	KM3_TAG_TYPE_DATE	= (int)SHIFT_U32(6, 28),
	KM3_TAG_TYPE_BOOL	= (int)SHIFT_U32(7, 28),
	KM3_TAG_TYPE_BIGNUM	= (int)SHIFT_U32(8, 28),
	KM3_TAG_TYPE_BYTES	= (int)SHIFT_U32(9, 28),
	KM3_TAG_TYPE_ULONG_REP	= (int)SHIFT_U32(10,28),
};

enum km_tag {
	KM3_TAG_INVALID		= KM3_TAG_TYPE_INVALID | 0,
	KM3_TAG_PURPOSE		= KM3_TAG_TYPE_ENUM_REP | 1,
	KM3_TAG_ALGORITHM	= KM3_TAG_TYPE_ENUM | 2,
	KM3_TAG_KEY_SIZE	= KM3_TAG_TYPE_UINT | 3,
	KM3_TAG_BLOCK_MODE	= KM3_TAG_TYPE_ENUM_REP | 4,
	KM3_TAG_DIGEST		= KM3_TAG_TYPE_ENUM_REP | 5,
	KM3_TAG_PADDING		= KM3_TAG_TYPE_ENUM_REP | 6,
	KM3_TAG_CALLER_NONCE	= KM3_TAG_TYPE_BOOL | 7,
	KM3_TAG_MIN_MAC_LENGTH	= KM3_TAG_TYPE_UINT | 8,
	KM3_TAG_KDF		= KM3_TAG_TYPE_ENUM_REP | 9,
	KM3_TAG_EC_CURVE	= KM3_TAG_TYPE_ENUM | 10,
	KM3_TAG_RSA_PUBLIC_EXPONENT	= KM3_TAG_TYPE_ULONG | 200,
	KM3_TAG_ECIES_SINGLE_HASH_MODE	= KM3_TAG_TYPE_BOOL | 201,
	KM3_TAG_INCLUDE_UNIQUE_ID	= KM3_TAG_TYPE_BOOL | 202,
	KM3_TAG_BLOB_USAGE_REQUIREMENTS	= KM3_TAG_TYPE_ENUM | 301,
	KM3_TAG_BOOTLOADER_ONLY		= KM3_TAG_TYPE_BOOL | 302,
	KM3_TAG_ACTIVE_DATETIME		= KM3_TAG_TYPE_DATE | 400,
	KM3_TAG_ORIGINATION_EXPIRE_DATETIME	= KM3_TAG_TYPE_DATE | 401,
	KM3_TAG_USAGE_EXPIRE_DATETIME		= KM3_TAG_TYPE_DATE | 402,
	KM3_TAG_MIN_SECONDS_BETWEEN_OPS		= KM3_TAG_TYPE_UINT | 403,
	KM3_TAG_MAX_USES_PER_BOOT		= KM3_TAG_TYPE_UINT | 404,
	KM3_TAG_ALL_USERS			= KM3_TAG_TYPE_BOOL | 500,
	KM3_TAG_USER_ID				= KM3_TAG_TYPE_UINT | 501,
	KM3_TAG_USER_SECURE_ID			= KM3_TAG_TYPE_ULONG_REP | 502,
	KM3_TAG_NO_AUTH_REQUIRED		= KM3_TAG_TYPE_BOOL | 503,
	KM3_TAG_USER_AUTH_TYPE			= KM3_TAG_TYPE_ENUM | 503,
	KM3_TAG_AUTH_TIMEOUT			= KM3_TAG_TYPE_UINT | 505,
	KM3_TAG_ALLOW_WHILE_ON_BODY		= KM3_TAG_TYPE_BOOL | 506,
	KM3_TAG_ALL_APPLICATIONS		= KM3_TAG_TYPE_BOOL | 600,
	KM3_TAG_APPLICATION_ID			= KM3_TAG_TYPE_BYTES | 601,
	KM3_TAG_EXPORTABLE			= KM3_TAG_TYPE_BOOL | 602,
	KM3_TAG_APPLICATION_DATA		= KM3_TAG_TYPE_BYTES | 700,
	KM3_TAG_CREATION_DATETIME		= KM3_TAG_TYPE_DATE | 701,
	KM3_TAG_ORIGIN				= KM3_TAG_TYPE_ENUM | 702,
	KM3_TAG_ROLLBACK_RESISTANT		= KM3_TAG_TYPE_BOOL | 703,
	KM3_TAG_ROOT_OF_TRUST			= KM3_TAG_TYPE_BYTES | 704,
	KM3_TAG_OS_VERSION			= KM3_TAG_TYPE_UINT | 705,
	KM3_TAG_OS_PATCHLEVEL			= KM3_TAG_TYPE_UINT | 706,
	KM3_TAG_UNIQUE_ID			= KM3_TAG_TYPE_BYTES | 707,
	KM3_TAG_ATTESTATION_CHALLENGE		= KM3_TAG_TYPE_BYTES | 708,
	KM3_TAG_ATTESTATION_APPLICATION_ID	= KM3_TAG_TYPE_BYTES | 709,
	KM3_TAG_ATTESTATION_ID_BRAND		= KM3_TAG_TYPE_BYTES | 710,
	KM3_TAG_ATTESTATION_ID_DEVICE		= KM3_TAG_TYPE_BYTES | 711,
	KM3_TAG_ATTESTATION_ID_PRODUCT		= KM3_TAG_TYPE_BYTES | 712,
	KM3_TAG_ATTESTATION_ID_SERIAL		= KM3_TAG_TYPE_BYTES | 713,
	KM3_TAG_ATTESTATION_ID_IMEI		= KM3_TAG_TYPE_BYTES | 714,
	KM3_TAG_ATTESTATION_ID_MEID		= KM3_TAG_TYPE_BYTES | 715,
	KM3_TAG_ATTESTATION_ID_MANUFACTURER	= KM3_TAG_TYPE_BYTES | 716,
	KM3_TAG_ATTESTATION_ID_MODEL		= KM3_TAG_TYPE_BYTES | 717,
	KM3_TAG_ASSOCIATED_DATA			= KM3_TAG_TYPE_BYTES | 1000,
	KM3_TAG_NONCE				= KM3_TAG_TYPE_BYTES | 1001,
	KM3_TAG_AUTH_TOKEN			= KM3_TAG_TYPE_BYTES | 1002,
	KM3_TAG_MAC_LENGTH			= KM3_TAG_TYPE_UINT | 1003,
	KM3_TAG_RESET_SINCE_ID_ROTATION		= KM3_TAG_TYPE_BOOL | 1004,
};

static inline enum km_tag_type km_get_tag_type(enum km_tag tag)
{
	return (uint32_t)tag & SHIFT_U32(0xf, 28);
}

enum km_error_code {
	KM_OK = 0,
	KM_ROOT_OF_TRUST_ALREADY_SET = -1,
	KM_UNSUPPORTED_PURPOSE = -2,
	KM_INCOMPATIBLE_PURPOSE = -3,
	KM_UNSUPPORTED_ALGORITHM = -4,
	KM_INCOMPATIBLE_ALGORITHM = -5,
	KM_UNSUPPORTED_KEY_SIZE = -6,
	KM_UNSUPPORTED_BLOCK_MODE = -7,
	KM_INCOMPATIBLE_BLOCK_MODE = -8,
	KM_UNSUPPORTED_MAC_LENGTH = -9,
	KM_UNSUPPORTED_PADDING_MODE = -10,
	KM_INCOMPATIBLE_PADDING_MODE = -11,
	KM_UNSUPPORTED_DIGEST = -12,
	KM_INCOMPATIBLE_DIGEST = -13,
	KM_INVALID_EXPIRATION_TIME = -14,
	KM_INVALID_USER_ID = -15,
	KM_INVALID_AUTHORIZATION_TIMEOUT = -16,
	KM_UNSUPPORTED_KEY_FORMAT = -17,
	KM_INCOMPATIBLE_KEY_FORMAT = -18,
	KM_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM = -19,   /* For PKCS8 & PKCS1 */
	KM_UNSUPPORTED_KEY_VERIFICATION_ALGORITHM = -20, /* For PKCS8 & PKCS1 */
	KM_INVALID_INPUT_LENGTH = -21,
	KM_KEY_EXPORT_OPTIONS_INVALID = -22,
	KM_DELEGATION_NOT_ALLOWED = -23,
	KM_KEY_NOT_YET_VALID = -24,
	KM_KEY_EXPIRED = -25,
	KM_KEY_USER_NOT_AUTHENTICATED = -26,
	KM_OUTPUT_PARAMETER_NULL = -27,
	KM_INVALID_OPERATION_HANDLE = -28,
	KM_INSUFFICIENT_BUFFER_SPACE = -29,
	KM_VERIFICATION_FAILED = -30,
	KM_TOO_MANY_OPERATIONS = -31,
	KM_UNEXPECTED_NULL_POINTER = -32,
	KM_INVALID_KEY_BLOB = -33,
	KM_IMPORTED_KEY_NOT_ENCRYPTED = -34,
	KM_IMPORTED_KEY_DECRYPTION_FAILED = -35,
	KM_IMPORTED_KEY_NOT_SIGNED = -36,
	KM_IMPORTED_KEY_VERIFICATION_FAILED = -37,
	KM_INVALID_ARGUMENT = -38,
	KM_UNSUPPORTED_TAG = -39,
	KM_INVALID_TAG = -40,
	KM_MEMORY_ALLOCATION_FAILED = -41,
	KM_IMPORT_PARAMETER_MISMATCH = -44,
	KM_SECURE_HW_ACCESS_DENIED = -45,
	KM_OPERATION_CANCELLED = -46,
	KM_CONCURRENT_ACCESS_CONFLICT = -47,
	KM_SECURE_HW_BUSY = -48,
	KM_SECURE_HW_COMMUNICATION_FAILED = -49,
	KM_UNSUPPORTED_EC_FIELD = -50,
	KM_MISSING_NONCE = -51,
	KM_INVALID_NONCE = -52,
	KM_MISSING_MAC_LENGTH = -53,
	KM_KEY_RATE_LIMIT_EXCEEDED = -54,
	KM_CALLER_NONCE_PROHIBITED = -55,
	KM_KEY_MAX_OPS_EXCEEDED = -56,
	KM_INVALID_MAC_LENGTH = -57,
	KM_MISSING_MIN_MAC_LENGTH = -58,
	KM_UNSUPPORTED_MIN_MAC_LENGTH = -59,
	KM_UNSUPPORTED_KDF = -60,
	KM_UNSUPPORTED_EC_CURVE = -61,
	KM_KEY_REQUIRES_UPGRADE = -62,
	KM_ATTESTATION_CHALLENGE_MISSING = -63,
	KM_KEYMASTER_NOT_CONFIGURED = -64,
	KM_ATTESTATION_APPLICATION_ID_MISSING = -65,
	KM_CANNOT_ATTEST_IDS = -66,
	KM_UNIMPLEMENTED = -100,
	KM_VERSION_MISMATCH = -101,
	KM_UNKNOWN_ERROR = -100,
};

enum km_algorithm {
	KM_RSA = 1,
	KM_EC = 3,
	KM_AES = 32,
	KM_HMAC = 128,
};

enum km_key_origin {
	KM_GENERATED = 0,
	KM_DERIVED = 1,
	KM_IMPORTED = 2,
	KM_UNKNOWN = 3,
};

struct km_key_param_head;

TEE_Result km_configure(uint32_t os_version, uint32_t os_patchlevel);
TEE_Result km_add_rng_entropy(const void *buf, size_t blen);

TEE_Result km_gen_key(struct km_key_param_head *kph, void *key_blob,
		      size_t *key_blob_size);

TEE_Result km_get_key_characteristics(void *key_blob, uint32_t key_blob_size,
				      struct km_key_param_head *kph);

#endif /*LOCAL_KM_H*/
